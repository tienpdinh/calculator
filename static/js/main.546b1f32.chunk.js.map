{"version":3,"sources":["components/css/Calculator.module.css","components/FirebaseConfig.js","components/Calculation.js","components/Calculator.js","components/Navigation.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Calculation","props","Toast","Header","closeButton","className","alt","stat","Body","x","op","y","result","Calculator","state","data","updateX","evt","setState","target","value","updateY","updateOp","getServerTime","estimatedServerTimeMs","offsetRef","on","snap","offset","val","Date","getTime","listCalculations","results","itemsRef","dataSnapshot","crtTime","console","log","status","unshift","keyid","key","logCalculation","parseFloat","push","Firebase","database","ref","this","list","slice","map","i","_","Container","classes","customForm","Form","onSubmit","Row","Col","Group","Control","required","placeholder","onChange","Feedback","type","as","controlId","Button","customLog","Component","navigation","Navbar","sticky","Brand","href","Toggle","Collapse","Nav","Link","Layout","elementBtn","Navigation","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.546b1f32.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"customForm\":\"Calculator_customForm__1Usva\",\"customLog\":\"Calculator_customLog__gY0qD\"};","import * as firebase from 'firebase';\n\nvar config = {\n    apiKey: \"AIzaSyAontK8v2WUX__l-I3yBsboygEToyU2e-4\",\n    authDomain: \"realtime-calc-82c74.firebaseapp.com\",\n    databaseURL: \"https://realtime-calc-82c74.firebaseio.com\",\n    projectId: \"realtime-calc-82c74\",\n    storageBucket: \"realtime-calc-82c74.appspot.com\",\n    messagingSenderId: \"110753882086\",\n    appId: \"1:110753882086:web:6a1aa3d4b8a4effa23c027\",\n    measurementId: \"G-MFWBSH62CC\"\n  };\n\nexport default firebase.initializeApp(config);","import React from \"react\";\nimport Toast from \"react-bootstrap/Toast\";\n\nconst Calculation = props => {\n  return (\n    <Toast>\n      <Toast.Header closeButton={false}>\n        <img className=\"rounded mr-2\" alt=\"\" />\n        <strong className=\"mr-auto\">Anonymous</strong>\n        <small>{props.stat}</small>\n      </Toast.Header>\n      <Toast.Body>\n        {props.x + \" \" + props.op + \" \" + props.y + \" = \" + props.result}\n      </Toast.Body>\n    </Toast>\n  );\n};\n\nexport default Calculation;\n","import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport classes from \"./css/Calculator.module.css\";\nimport Firebase from \"./FirebaseConfig\";\nimport Calculation from \"./Calculation\";\nimport Container from \"react-bootstrap/Container\";\n\nclass Calculator extends Component {\n  state = {\n    x : '',\n    y : '',\n    op : '+',\n    data: []\n  }\n\n  constructor (props) {\n    super(props);\n    this.itemsRef = Firebase.database().ref('Calculations');\n    this.offsetRef = Firebase.database().ref('.info/serverTimeOffset');\n  }\n\n  componentDidMount () {\n    this.listCalculations();\n    this.getServerTime();\n  }\n\n  updateX = (evt) => {\n    this.setState({\n      x : evt.target.value\n    });\n  }\n\n  updateY = (evt) => {\n    this.setState({\n      y : evt.target.value\n    });\n  }\n\n  updateOp = (evt) => {\n    this.setState({\n      op : evt.target.value\n    });\n  }\n\n  getServerTime = () => {\n    let estimatedServerTimeMs = 0;\n    this.offsetRef.on('value', (snap) => {\n      const offset = snap.val();\n      estimatedServerTimeMs = new Date().getTime() + offset;\n    });\n    return estimatedServerTimeMs;\n  }\n\n  listCalculations = () => {\n    let results = [];\n    this.itemsRef.on('child_added', (dataSnapshot) => {\n      const crtTime = this.getServerTime();\n      const offset  = crtTime - dataSnapshot.val().crtTime;\n      console.log(offset);\n      let status = '';\n      if (offset < 30000)\n        status = 'just now';\n      else if (offset < 60000)\n        status = '30s ago';\n      else\n        status = 'a while ago';\n      results.unshift({\n        x      : dataSnapshot.val().x,\n        y      : dataSnapshot.val().y,\n        result : dataSnapshot.val().result,\n        op     : dataSnapshot.val().op,\n        keyid  : dataSnapshot.key,\n        stat   : status\n      })\n      this.setState({\n        data : results\n      })\n    })\n  }\n\n  logCalculation = () => {\n    let result = 0;\n    const x = parseFloat(this.state.x);\n    const y = parseFloat(this.state.y);\n    if (this.state.op === '+')\n      result = x + y;\n    if (this.state.op === '-')\n      result = x - y;\n    if (this.state.op === '×')\n      result = x * y;\n    if (this.state.op === '÷')\n      result = x / y;\n    this.itemsRef.push({\n      x      : x,\n      y      : y,\n      op     : this.state.op,\n      result : result,\n      crtTime: this.getServerTime()\n    });\n  }\n\n  render() {\n    // Recalculate and render new data from server\n    let data = this.state.data.slice(0,10);\n    const list = data.map((i, _) => {\n      return <Calculation x={i.x} y={i.y} op={i.op} result={i.result} key={i.keyid} stat={i.stat}/>\n    });\n    return (\n      <Container className={classes.customForm}>\n        <Form onSubmit={this.logCalculation}>\n          <h2 className=\"text-center\">Your calculation here</h2>\n          <Form.Row>\n            <Col>\n              <Form.Group>\n                <Form.Control required placeholder=\"x\" value={this.state.x} \n                  onChange={evt => this.updateX(evt)} />\n                <Form.Control.Feedback type=\"invalid\">\n                  Enter x!\n                </Form.Control.Feedback>\n              </Form.Group>\n            </Col>\n            <Form.Group as={Col} controlId=\"formGridState\">\n              <Form.Control as=\"select\" value={this.state.op}\n                onChange={evt => this.updateOp(evt)}>\n                <option>+</option>\n                <option>-</option>\n                <option>×</option>\n                <option>÷</option>\n              </Form.Control>\n            </Form.Group>\n            <Col>\n              <Form.Group>\n                <Form.Control required placeholder=\"y\" value={this.state.y}\n                  onChange={evt => this.updateY(evt)} />\n                <Form.Control.Feedback type=\"invalid\">\n                  Enter y!\n                </Form.Control.Feedback>\n              </Form.Group>\n            </Col>\n          </Form.Row>\n          <Button type=\"submit\" className=\"btn-lg btn-dark btn-block\">\n            Calculate and Log\n          </Button>\n        </Form>\n        <Container className={classes.customLog}>\n          {list}\n        </Container>\n      </Container>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nconst navigation = (props) => (\n  <Navbar sticky=\"top\">\n    <Navbar.Brand href=\"https://tienpdinh.com/calculator\">CalcFun</Navbar.Brand>\n    <Navbar.Toggle />\n    <Navbar.Collapse className=\"justify-content-end\">\n      <Nav className=\"mr-auto\">\n        <Nav.Link href=\"#home\">Home</Nav.Link>\n        <Nav.Link href=\"#link\">Link</Nav.Link>\n      </Nav>\n    </Navbar.Collapse>\n  </Navbar>\n);\n\nexport default navigation;\n","import React, { Component } from 'react';\nimport Calculator from './Calculator';\nimport Container from 'react-bootstrap/Container';\nimport Navigation from './Navigation';\nimport classes from './css/Calculator.module.css';\n\nclass Layout extends Component {\n    render () {\n        return (\n            <Container className={classes.elementBtn}>\n                <Navigation />\n                <Calculator />\n            </Container>\n        );\n    }\n}\n\nexport default Layout;","import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Layout from \"./components/Layout\";\n\nfunction App() {\n  return (\n    <Layout />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}